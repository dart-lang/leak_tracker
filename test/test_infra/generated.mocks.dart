// Mocks generated by Mockito 5.3.2 from annotations
// in leak_tracker/test/test_infra/generated.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:leak_tracker/src/_object_tracker.dart' as _i3;
import 'package:leak_tracker/src/leak_analysis_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLeakSummary_0 extends _i1.SmartFake implements _i2.LeakSummary {
  _FakeLeakSummary_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLeaks_1 extends _i1.SmartFake implements _i2.Leaks {
  _FakeLeaks_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ObjectTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockObjectTracker extends _i1.Mock implements _i3.ObjectTracker {
  @override
  void startTracking(
    Object? object, {
    required Map<String, dynamic>? context,
    required String? trackedClass,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #startTracking,
          [object],
          {
            #context: context,
            #trackedClass: trackedClass,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerDisposal(
    Object? object, {
    required Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerDisposal,
          [object],
          {#context: context},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addContext(
    Object? object, {
    required Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addContext,
          [object],
          {#context: context},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.LeakSummary collectLeaksSummary() => (super.noSuchMethod(
        Invocation.method(
          #collectLeaksSummary,
          [],
        ),
        returnValue: _FakeLeakSummary_0(
          this,
          Invocation.method(
            #collectLeaksSummary,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLeakSummary_0(
          this,
          Invocation.method(
            #collectLeaksSummary,
            [],
          ),
        ),
      ) as _i2.LeakSummary);
  @override
  _i2.Leaks collectLeaks() => (super.noSuchMethod(
        Invocation.method(
          #collectLeaks,
          [],
        ),
        returnValue: _FakeLeaks_1(
          this,
          Invocation.method(
            #collectLeaks,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLeaks_1(
          this,
          Invocation.method(
            #collectLeaks,
            [],
          ),
        ),
      ) as _i2.Leaks);
}
